<?php

declare(strict_types=1);

namespace KWIO\GutenbergBlocks;

/**
 * Enqueues assets from the configured dist directory.
 */
class AssetCollector
{
    /**
     * Holds the configurated options.
     *
     * @var Config
     */
    private Config $config;

    /**
     * @param Config $config The configurated options.
     */
    public function __construct(Config $config)
    {
        $this->config = $config;
    }

    /**
     * Uses add_editor_style when library is used in a theme.
     * @see Loader::int
     */
    public function addEditorStyles(): void
    {
        if ($this->config->isTheme && file_exists($this->config->dirPath . $this->config->distDir . 'editor.css')) {
            add_editor_style($this->config->distDir . 'editor.css');
        }
    }

    /**
     * Enqueues blocks.css and critical.css files in admin and frontend (nonblocking).
     * @see Loader::int
     */
    public function enqueueAssets(): void
    {
        if (file_exists($this->config->dirPath . $this->config->distDir . 'blocks.css')) {
            wp_enqueue_style(
                $this->config->namespace . '-blocks',
                $this->config->dirUrl . $this->config->distDir . 'blocks.css',
                [],
                $this->getVersionHash('blocks.css'),
                is_admin() ? 'all' : 'nonblocking'
            );
        }

        if (!empty($this->getCriticalCss())) {
            wp_add_inline_style($this->config->namespace . '-blocks', $this->getCriticalCss());
        }
    }

    /**
     * Enqueues additional editor styles and block registration script.
     * @see Loader::int
     */
    public function enqueueEditorAssets(): void
    {
        $handle = $this->config->namespace . '-blocks-editor';
        $manifest = $this->getAssetManifest('editor');
        $domain = preg_replace('/-theme$/', '', $this->config->namespace);

        if (file_exists($this->config->dirPath . $this->config->distDir . 'editor.js')) {
            wp_enqueue_script(
                $handle,
                $this->config->dirUrl . $this->config->distDir . 'editor.js',
                $manifest['dependencies'],
                $manifest['version'],
                true
            );

            wp_set_script_translations(
                $handle,
                $domain,
                $this->config->translationsPath
            );
        }

        if (!$this->config->isTheme && file_exists($this->config->dirPath . $this->config->distDir . 'editor.css')) {
            wp_enqueue_style(
                $this->config->namespace . '-blocks-editor',
                $this->config->dirUrl . $this->config->distDir . 'editor.css',
                ['wp-edit-blocks'],
                $this->getVersionHash('editor.css')
            );
        }
    }

    /**
     * Enqueues JavaScript file for frontend and sets a global variable to access the WP-REST-API root URL.
     * @see Loader::int
     */
    public function enqueueScripts(): void
    {
        $manifest = $this->getAssetManifest('blocks');

        if (file_exists($this->config->dirPath . $this->config->distDir . 'blocks.js')) {
            wp_enqueue_script(
                $this->config->namespace . '-blocks',
                $this->config->dirUrl . $this->config->distDir . 'blocks.js',
                $manifest['dependencies'],
                $manifest['version'],
                true
            );
        }
    }

    /**
     * Loads the asset manifest generated by `@wordpress/dependency-extraction-webpack-plugin`.
     *
     * @param string $entry webpack entry name.
     *
     * @return array Information of the current entry.
     */
    private function getAssetManifest(string $entry): array
    {
        $manifestPath = $this->config->dirPath . $this->config->distDir . "{$entry}.asset.php";
        if (!file_exists($manifestPath)) {
            return [
                'dependencies' => [],
                'version' => $this->getVersionHash($entry . '.js')
            ];
        }

        return require $manifestPath;
    }

    /**
     * Extracts and inlines styles from critical.css file.
     *
     * @return string Extracte styles.
     */
    private function getCriticalCss(): string
    {
        $criticalCssPath = $this->config->dirPath . $this->config->distDir . 'critical.css';
        if (!is_readable($criticalCssPath)) {
            return '';
        }

        $criticalCss = file_get_contents($criticalCssPath);
        $criticalCss = str_replace('../../../../', content_url('/'), $criticalCss);

        return trim($criticalCss);
    }

    /**
     * Returns hash of last changed timestamp.
     *
     * @param string $asset Asset name.
     *
     * @return string Hashed timestamp.
     */
    private function getVersionHash(string $asset): string
    {
        $assetPath = $this->config->dirPath . $this->config->distDir . $asset;
        if (!is_readable($assetPath)) {
            return '';
        }

        return md5((string)filemtime($assetPath));
    }
}